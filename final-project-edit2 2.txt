#include <stdio.h>
#include <windows.h>
#include <math.h>
#include <stdlib.h>
#include <GL/glut.h>
#include <GL/gl.h>
#include <time.h>
#include <iostream>
#include <windows.h>

using namespace std;

float translate_x = 0.0;
float translate_y = 0.0;
float translate_z = 0.0;
static GLfloat spin = 0.0;
float spin_x=1.0;
float spin_y=0.0;
float spin_z=0.0;
int day=1;
bool rain=false;
bool carv=false;
bool planev=false;
bool top=false;
int flag=0;
bool help=false;


void delay(unsigned int mseconds)
{
    clock_t goal = mseconds + clock();
    while (goal > clock());
}

void myInit (void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glColor3f(0.0f, 0.0f, 0.0f);
    glPointSize(2.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 1024, 0.0, 768.0);
}


void *currentfont;

void setFont(void *font)
{
	currentfont=font;
}

void drawstring(float x,float y,float z,char *string)
{
	char *c;
	glRasterPos3f(x,y,z);

	for(c=string;*c!='\0';c++)
	{
		glutBitmapCharacter(currentfont,*c);
	}
}

void Full(int r,int g,int b)
{
    glColor3ub(r,g,b);
    glBegin(GL_QUADS);
    glVertex3i(-200,0,0);
    glVertex3i(1324,0,0);
    glVertex3i(1324,768,0);
    glVertex3i(-200,768,0);
}
//Road
void Road()        // ID101
{
    glColor3ub(78,78,78);
    glBegin(GL_QUADS);
    glVertex3i(-200,360,0);
    glVertex3i(1400,360,0);
    glVertex3i(1400,260,0);
    glVertex3i(-200,260,0);
    glEnd();
}
void roadBorder()  // ID102
{
    glColor3ub(255,255,255);
    glBegin(GL_QUADS);
    glVertex3i(-200,360,0);
    glVertex3i(1324,360,0);
    glVertex3i(1324,350,0);
    glVertex3i(-200,350,0);
    glEnd();

}
void TranslateRoadLine(int x,int y,int z)
{
    x-=50;
    if(x<=0)
    {
        x=1050;
    }
    glutPostRedisplay();
    Sleep(50);
}
//ROad Line
void RoadLine(int x,int y,int z) // ID103
{
    glColor3ub(255,255,255);
    glBegin(GL_QUADS);
    glVertex3i(x,y,z);
    glVertex3i(x+50,y,z);
    glVertex3i(x+50,y+10,z);
    glVertex3i(x,y+10,z);
    glEnd();


}


void playGround(int r,int g,int b)  // ID104
{
    //Grass
    glColor3ub(r,g,b);
    glBegin(GL_QUADS);
    glVertex3i(-200,0,0);
    glVertex3i(1324,0,0);
    glVertex3i(1324,120,0);
    glVertex3i(-200,120,0);
    glEnd();

}


void Light(int x,int y,int z)   //ID105
{
    //light
    glColor3ub(200,200,200);
    glBegin(GL_QUADS);
    glVertex3i(x+9,y,z);
    glVertex3i(x+110,y,z);
    glVertex3i(x+70,y+85,z);
    glVertex3i(x+50,y+85,z);
    glEnd();

}

//Dynamic Tree Function
void Tree(int x,int y,int z)   // ID106
{
    //Timber
    glColor3ub(90,70,60);
    glBegin(GL_QUADS);
    glVertex3i(x,y,z);
    glVertex3i(x+7,y,z);
    glVertex3i(x+7,y+20,z);
    glVertex3i(x,y+20,z);
    glEnd();

    //Lower Leaf
    glColor3ub(14,120,14);
    glBegin(GL_TRIANGLES);
    glVertex3i(x-15,y+19,z);
    glVertex3i(x+22,y+19,z);
    glVertex3f(x+3.5,y+45,z);
    glEnd();

    //Upper Leaf
    glBegin(GL_TRIANGLES);
    glVertex3i(x-10,y+35,z);
    glVertex3i(x+17,y+35,z);
    glVertex3f(x+3.5,y+60,z);
    glEnd();
}
//Dynamic Windows Function
void Windows(int x,int y,int z)  // ID107
{
    glColor3ub(255,255,255);
    glBegin(GL_QUADS);
    glVertex3i(x,y,z);
    glVertex3i(x+60,y,z);
    glVertex3i(x+60,y+70,z);
    glVertex3i(x,y+70,z);
    glEnd();

    //Black
    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(x+7,y+7,z);
    glVertex3i(x+27,y+7,z);
    glVertex3i(x+27,y+33,z);
    glVertex3i(x+7,y+33,z);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3i(x+33,y+7,z);
    glVertex3i(x+54,y+7,z);
    glVertex3i(x+54,y+33,z);
    glVertex3i(x+33,y+33,z);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3i(x+7,y+40,z);
    glVertex3i(x+27,y+40,z);
    glVertex3i(x+27,y+63,z);
    glVertex3i(x+7,y+63,z);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3i(x+33,y+40,z);
    glVertex3i(x+54,y+40,z);
    glVertex3i(x+54,y+63,z);
    glVertex3i(x+33,y+63,z);
    glEnd();
}
//Buildings
void Annex1(int r,int g,int b)  // ID108
{
   int windowsXf=-310,windowsXl=556;

    //Left Building
    glColor3ub(r,g,b);
    glBegin(GL_QUADS);
    glVertex3i(0,120,0);
    glVertex3i(628,120,0);
    glVertex3i(628,260,0);
    glVertex3i(-200,260,0);
    glEnd();

    //Right Building
    glBegin(GL_QUADS);
    glVertex3i(628,120,0);
    glVertex3i(1400,120,0);
    glVertex3i(1400,260,0);
    glVertex3i(628,260,0);
    glEnd();

    //Middle

    //First 4 Windows
    for(int i=8;i>=0;i--)
    {
        windowsXf+=90;
        Windows(windowsXf,160,0);
    }
    //Last 4 Windows
    for(int i=8;i>=0;i--)
    {
        windowsXl+=90;
        Windows(windowsXl,160,0);
    }
}
void Annex6(int r,int g,int b)  // ID109

{
     int windowsXf=-40,windowsXl=606;
    glColor3ub(r,g,b);
    glBegin(GL_QUADS);


    glBegin(GL_QUADS);
    glVertex3i(10,500,0);
    glVertex3i(600,500,0);
    glVertex3i(600,350,0);
    glVertex3i(10,350,0);
    glEnd();
    for(int i=5;i>=0;i--)
    {
        windowsXf+=90;
        Windows(windowsXf,380,0);
    }

}
void Dbuilding(int r,int g,int b) // ID110

{

    glColor3ub(r,g,b);
    glBegin(GL_QUADS);


    glBegin(GL_QUADS);
    glVertex3i(1400,700,0);
    glVertex3i(1200,700,0);
    glVertex3i(1200,350,0);
    glVertex3i(1400,350,0);
    glEnd();

}
void tprint(int x, int y,int z, char *string)  //ID112
{
    //set the position of the text in the window using the x and y coordinates
    glRasterPos2f(x,y);
    //get the length of the string to display
    int len = (int) strlen(string);

    //loop to display character by character
    for (int i = 0; i < len; i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,string[i]);
    }
};
void ttprint(int x, int y,int z, char *string)  //ID111
{
    //set the position of the text in the window using the x and y coordinates
    glRasterPos2f(x,y);
    //get the length of the string to display
    int len = (int) strlen(string);

    //loop to display character by character
    for (int i = 0; i < len; i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,string[i]);
    }
};


void reshape(int w,int h)
{
glViewport(0,0, (GLsizei)w,(GLsizei)h);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(100.0f, (GLfloat)w/(GLfloat)h, 1.0f, 100.0f);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
}


void Library(GLfloat x, GLfloat y,GLfloat z, GLfloat radius,int color) // ID201
{
	int i;
	int triangleAmount = 50; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * 3.1416;
    int counter=0;
    glColor3ub(color,color,color);
	glBegin(GL_TRIANGLE_FAN);
		glVertex3f(x, y,z); // centre of circle
		for(i = 0; i <= triangleAmount;i++) {
			counter+=1;
			glVertex3f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount)),z
			);
			if(counter<25)
            {
                color+=3;
                glColor3ub(color,color,color);
            }
            else
            {
                color-=3;
                glColor3ub(color,color,color);
            }
		}
	glEnd();
}


void otherCircle(GLfloat x, GLfloat y,GLfloat z, GLfloat radius,int r,int g,int b) //ID202
{
	int i;
	int triangleAmount = 20; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * 3.1416;
    int counter=0;
    glColor3ub(r,g,b);
	glBegin(GL_TRIANGLE_FAN);
		glVertex3f(x, y,z); // centre of circle
		for(i = 0; i <= triangleAmount;i++) {
			counter+=1;
			glVertex3f(
		            x + (radius * cos(i *  twicePi / triangleAmount)),
			    y + (radius * sin(i * twicePi / triangleAmount)),z
			);
		}
	glEnd();
}

void car()              // ID203
{
    static float a=-400.0f;
    if(a>=1324)
    {
         a=-400.0f;

    }
    else
    {
        a+=0.2f;
        //glColor3ub(r,g,b);
    }
    glColor3ub(255,0,255);
    glPushMatrix();
    glTranslatef(a,250,0);
    glBegin(GL_QUADS);
    glVertex3i(20,40,0);
    glVertex3i(220,40,0);
    glVertex3i(220,80,0);
    glVertex3i(20,80,0);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3i(40,80,0);
    glVertex3i(200,80,0);
    glVertex3i(160,110,0);
    glVertex3i(80,110,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(115,80,0);
    glVertex3i(190,80,0);
    glVertex3i(155,105,0);
    glVertex3i(115,105,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(45,80,0);
    glVertex3i(110,80,0);
    glVertex3i(110,105,0);
    glVertex3i(80,105,0);
    glEnd();

    //handle
    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(115,70,0);
    glVertex3i(135,70,0);
    glVertex3i(135,75,0);
    glVertex3i(115,75,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(45,70,0);
    glVertex3i(65,70,0);
    glVertex3i(65,75,0);
    glVertex3i(45,75,0);
    glEnd();

    //back bumper
    otherCircle(30.0f,60.0f,0.0f,19.0f,255,0,255);
    //front bumper
    otherCircle(210.0f,60.0f,0.0f,19.0f,255,0,255);

//Light
    glColor3ub(250,250,0);
    glBegin(GL_QUADS);
    glVertex3i(225,55,0);
    glVertex3i(230,55,0);
    glVertex3i(230,65,0);
    glVertex3i(225,65,0);
    glEnd();

    //light of cars
    if(day==2)
    {
        glColor3ub(200,200,200);
        glBegin(GL_QUADS);
        glVertex3i(230,55,0);
        glVertex3i(280,20,0);
        glVertex3i(280,95,0);
        glVertex3i(225,65,0);
        glEnd();
    }

    otherCircle(60.0f,40.0f,0.0f,18.0f,0,0,0);
    otherCircle(60.0f,40.0f,0.0f,10.0f,137,137,137);
    otherCircle(170.0f,40.0f,0.0f,18.0f,0,0,0);
    otherCircle(170.0f,40.0f,0.0f,10.0f,137,137,137);

    glPopMatrix();
    glutPostRedisplay();
}


void car2()             // ID204
{
    static float a=-1100.0f;
    if(a>=1324)
    {
         a=-1100.0f;

    }
    else
    {
        a+=0.2f;
        //glColor3ub(r,g,b);
    }
    glColor3ub(0,255,255);
    glPushMatrix();
    glTranslatef(a,250,0);
    glBegin(GL_QUADS);
    glVertex3i(20,40,0);
    glVertex3i(220,40,0);
    glVertex3i(220,80,0);
    glVertex3i(20,80,0);
    glEnd();

    glBegin(GL_QUADS);
    glVertex3i(40,80,0);
    glVertex3i(200,80,0);
    glVertex3i(160,110,0);
    glVertex3i(80,110,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(115,80,0);
    glVertex3i(190,80,0);
    glVertex3i(155,105,0);
    glVertex3i(115,105,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(45,80,0);
    glVertex3i(110,80,0);
    glVertex3i(110,105,0);
    glVertex3i(80,105,0);
    glEnd();

    //handle
    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(115,70,0);
    glVertex3i(135,70,0);
    glVertex3i(135,75,0);
    glVertex3i(115,75,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(45,70,0);
    glVertex3i(65,70,0);
    glVertex3i(65,75,0);
    glVertex3i(45,75,0);
    glEnd();

    //back bumper
    otherCircle(30.0f,60.0f,0.0f,19.0f,0,255,255);
    //front bumper
    otherCircle(210.0f,60.0f,0.0f,19.0f,0,255,255);

    //Light
    glColor3ub(250,250,0);
    glBegin(GL_QUADS);
    glVertex3i(225,55,0);
    glVertex3i(230,55,0);
    glVertex3i(230,65,0);
    glVertex3i(225,65,0);
    glEnd();

    //light of cars
    if(day==2)
    {
        glColor3ub(200,200,200);
        glBegin(GL_QUADS);
        glVertex3i(230,55,0);
        glVertex3i(280,20,0);
        glVertex3i(280,95,0);
        glVertex3i(225,65,0);
        glEnd();
    }

    otherCircle(60.0f,40.0f,0.0f,18.0f,0,0,0);
    otherCircle(60.0f,40.0f,0.0f,10.0f,137,137,137);
    otherCircle(170.0f,40.0f,0.0f,18.0f,0,0,0);
    otherCircle(170.0f,40.0f,0.0f,10.0f,137,137,137);

    glPopMatrix();
    glutPostRedisplay();
}



void truck()            //ID205
{
    static float a=650.0f;
    if(a<=-1300)
    {
         a=550.0f;

    }
    else
    {
        a-=0.2f;
        //glColor3ub(r,g,b);
    }
    glColor3ub(255,255,255);
    //front bumper
    glPushMatrix();
    glTranslatef(a,250,0);
    otherCircle(780.0f,130.0f,0.0f,41.0f,255,0,255);
    //main body
    glBegin(GL_QUADS);
    glVertex3i(750,90,0);
    glVertex3i(1000,90,0);
    glVertex3i(1000,140,0);
    glVertex3i(750,140,0);
    glEnd();


    glBegin(GL_QUADS);
    glVertex3i(750,140,0);
    glVertex3i(860,140,0);
    glVertex3i(860,160,0);
    glVertex3i(750,160,0);
    glEnd();
    //window
    glBegin(GL_QUADS);
    glVertex3i(750,160,0);
    glVertex3i(860,160,0);
    glVertex3i(860,190,0);
    glVertex3i(800,190,0);
    glEnd();

    glColor3ub(0,0,0);
    glBegin(GL_QUADS);
    glVertex3i(760,160,0);
    glVertex3i(855,160,0);
    glVertex3i(855,185,0);
    glVertex3i(800,185,0);
    glEnd();

    //handle
    glBegin(GL_QUADS);
    glVertex3i(840,145,0);
    glVertex3i(855,145,0);
    glVertex3i(855,150,0);
    glVertex3i(840,150,0);
    glEnd();

    //grill
    glColor3ub(0,0,0);
    glBegin(GL_LINES);
    glVertex3i(860,160,0);
    glVertex3i(1000,160,0);
    glVertex3i(860,159,0);
    glVertex3i(1000,159,0);
    glVertex3i(1000,160,0);
    glVertex3i(1000,140,0);
    glVertex3i(990,160,0);
    glVertex3i(990,140,0);
    glVertex3i(980,160,0);
    glVertex3i(980,140,0);
    glVertex3i(970,160,0);
    glVertex3i(970,140,0);
    glVertex3i(960,160,0);
    glVertex3i(960,140,0);
    glVertex3i(950,160,0);
    glVertex3i(950,140,0);
    glVertex3i(940,160,0);
    glVertex3i(940,140,0);
    glVertex3i(930,160,0);
    glVertex3i(930,140,0);
    glVertex3i(920,160,0);
    glVertex3i(920,140,0);
    glVertex3i(910,160,0);
    glVertex3i(910,140,0);
    glVertex3i(900,160,0);
    glVertex3i(900,140,0);
    glVertex3i(890,160,0);
    glVertex3i(890,140,0);
    glVertex3i(880,160,0);
    glVertex3i(880,140,0);
    glVertex3i(870,160,0);
    glVertex3i(870,140,0);
    glEnd();



    //wheel
    otherCircle(800.0f,90.0f,0.0f,21.0f,0,0,0);
    otherCircle(800.0f,90.0f,0.0f,15.0f,131,131,131);
    otherCircle(950.0f,90.0f,0.0f,21.0f,0,0,0);
    otherCircle(950.0f,90.0f,0.0f,15.0f,131,131,131);

    //back light
    glColor3ub(255,0,0);
    glBegin(GL_QUADS);
    glVertex3i(1000,110,0);
    glVertex3i(1005,110,0);
    glVertex3i(1005,120,0);
    glVertex3i(1000,120,0);
    glEnd();

    //frontlignt
    glColor3ub(255,255,0);
    glBegin(GL_QUADS);
    glVertex3i(740,90,0);
    glVertex3i(750,90,0);
    glVertex3i(750,102,0);
    glVertex3i(740,102,0);
    glEnd();



    //truck light
    if(day==2)
    {
        glColor3ub(200,200,200);
        glBegin(GL_QUADS);
        glVertex3i(680,60,0);
        glVertex3i(740,90,0);
        glVertex3i(740,102,0);
        glVertex3i(680,130,0);
        glEnd();
    }
    glColor3ub(255,255,255);
    ttprint(860,110,0,"AIUB");
    glPopMatrix();
    glutPostRedisplay();
}

void clouds(float x,float y,float z,int m,int l,int n)  // ID206
{
    static float a=-1300.0f;
    if(a>=1324)
    {
         a=-1300.0f;

    }
    else
    {
        a+=0.005f;
        //glColor3ub(r,g,b);
    }
    glPushMatrix();
    glTranslatef(a,0,0);


    //cloud1
    otherCircle(x,y,z,50.0f,m,l,n);
    otherCircle(x-50,y,z,40.0f,m,l,n);
    otherCircle(x+50,y,z,40.0f,m,l,n);
    glPopMatrix();
    glutPostRedisplay();
}
//circleLine
void DbuildLine()               //ID207
{
    glColor3ub(240,240,240);
    glBegin(GL_LINES);
    glLineWidth(5.0f);
    glVertex3i(1200,800,0);
    glVertex3i(1400,800,0);
    glVertex3i(1200,500,0);
    glVertex3i(1400,500,0);
    glVertex3i(1200,550,0);
    glVertex3i(1400,550,0);
    glVertex3i(1200,600,0);
    glVertex3i(1400,600,0);
    glVertex3i(1200,450,0);
    glVertex3i(1400,450,0);
    glVertex3i(1200,400,0);
    glVertex3i(1400,400,0);
    glEnd();
}

void circleLine()               //ID207
{
    glColor3ub(240,240,240);
    glBegin(GL_LINES);
    glLineWidth(5.0f);
    glVertex3i(780,500,0);
    glVertex3i(1120,500,0);
    glVertex3i(788,550,0);
    glVertex3i(1112,550,0);
    glVertex3i(812,600,0);
    glVertex3i(1088,600,0);
    glVertex3i(788,450,0);
    glVertex3i(1112,450,0);
    glVertex3i(812,400,0);
    glVertex3i(1088,400,0);
    glEnd();
}
void nightMode()        // ID208
{
    int roadlineX=-10;
    int treeXf=-350;
    int treeXl=528;
    int lamp=-350;
    int light=-350;
    //Full Body
        Full(55,55,55);

        playGround(42,55,17);
        //Middle Top Corridor

        Library(950.0f,500.0f,0.0f,170.0f,137.0f);
        circleLine();
        Road();
        otherCircle(300.0f,670.0f,0.0f,32.0f,250,250,250);
        clouds(-450.0f,670.0f,0.0f,173, 173, 133);
        //cloud0
        clouds(-150.0f,630.0f,0.0f,173, 173, 133);
        //cloud1
        clouds(150.0f,670.0f,0.0f,173, 173, 133);

        //cloud2
        clouds(450.0f,600.0f,0.0f,205, 205, 177);
        //cloud3
        clouds(750.0f,690.0f,0.0f,173, 173, 133);
        //cloud4
        clouds(1050.0f,680.0f,0.0f,173, 173, 133);

        //Building
        Annex1(56,46,47);
        Annex6(56,47,46);

        Dbuilding(128,128,128);
        DbuildLine();



        //First 4 Tree
        for(int i=7;i>=0;i--)
        {
            treeXf+=120;
            Tree(treeXf,360,0);
        }
        //Last 4 Tree
        for(int i=5;i>=0;i--)
        {
            treeXl+=120;
            Tree(treeXl,360,0);
        }





        //RoadLine
        for(int i=55;i>0;i--)
        {
            roadlineX+=100;
            RoadLine(roadlineX,300,0);
        }
        roadBorder();




        glColor3ub(0,0,255);
        tprint(50,500,0,"AMERICAN INTERNATIONAL UNIVERSITY- BANGLADESH");
        if(carv)
        {
            truck();
            car();
            car2();
        }

        glPopMatrix();

}

void dayMode()          // ID209
{
        int roadlineX=-300;
        int treeXf=-350;
        int treeXl=528;
        int lamp=-350;
        int light=-350;

        Full(131,183,231);
        //Road


        //cloud0
        clouds(-100.0f,630.0f,0.0f,250,250,250);
        //cloud1
        clouds(150.0f,670.0f,0.0f,250,250,250);

        //cloud2
        clouds(450.0f,600.0f,0.0f,250,250,250);
        //cloud3
        clouds(750.0f,690.0f,0.0f,250,250,250);
        //cloud4
        clouds(1050.0f,710.0f,0.0f,250,250,250);
        //Play Ground
        playGround(42,95,17);
        //Middle Top Corridor


        Library(950.0f,500.0f,0.0f,170.0f,137.0f);
        circleLine();
        Road();

        //RoadLine

        //Building
        Annex1(134, 89, 45);
        Annex6(134, 89, 45);


        //First 4 Tree
        for(int i=5;i>=0;i--)
        {
            treeXf+=120;
            Tree(treeXf,360,0);
        }
        //Last 4 Tree
        for(int i=5;i>=0;i--)
        {
            treeXl+=120;
            Tree(treeXl,360,0);
        }

        for(int i=55;i>0;i--)
        {
            roadlineX+=100;
            RoadLine(roadlineX,300,0);
        }
        //light
        roadBorder();

        glColor3ub(0,0,255);
        tprint(50,500,0,"AMERICAN INTERNATIONAL UNIVERSITY- BANGLADESH");
        if(carv)
        {
            truck();
            car();
            car2();
        }
        glPopMatrix();

}



void startscreen(void)
{
    setFont(GLUT_BITMAP_TIMES_ROMAN_24);
    glClearColor(0.000, 0.000, 0.000,0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0,1,0);
    drawstring(200.0,700.0,0.0,"AMERICAN INTERNATIONAL UNIVERSITY-BANGLADESH");
    glColor3f(0,0,1);
    drawstring(200,650,0.0,"Computer Science and Engineering");
    glColor3f(0.7,0.7,0.7);
    drawstring(450,530,0.0,"PROJECT ON");
    drawstring(250,500,0.0,"COMPUTER GRAPHICS: American international University ");
    glColor3f(1,0.5,0);
    drawstring(75,400,0.0,"SUBMITTED BY:");
    glColor3f(1,1,1);
    drawstring(75,370,0.0,"EFTI, ESRAJUL  HAQUE                      (19-40036-1)");
    drawstring(75,290,0.0,"MD. RAKIBUL   HASAN                       (18-38388-2)");
    drawstring(75,210,0.0,"TUSHAR, RAISUL  ISLAM                      (19-40046-1)");
    drawstring(75,130,0.0,"SHOFIUL   ALOM  TANVIR                     (18-36283-1)");
    glColor3f(1,0.5,0);
    drawstring(650,400,0.0,"SUBMITTED TO:");
    glColor3f(1,1,1);
    drawstring(650,370,0.0,"ANEEM AL AHSAN RUPAI");
    glColor3f(0,1,0);
    drawstring(400,80,0.0,"PRESS ENTER TO START");
    glFlush();
}
void controlsScreen()
{
    setFont(GLUT_BITMAP_TIMES_ROMAN_24);
    glClearColor(0.000, 0.000, 0.000,0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.596, 0.984, 0.596);
    drawstring(370.0,700.0,0.0,"INSTRUCTIONS:");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(250.0,640.0,0.0,"DAY MODE");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(600.0,640.0,0.0,"PRESS 'D'");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(250.0,640.0,0.0,"DAY MODE");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(600.0,640.0,0.0,"PRESS 'D'");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(250.0,600.0,0.0,"NIGHT MODE");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(600.0,600.0,0.0,"PRESS 'N'");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(250.0,560.0,0.0,"CAR MOVING");
    glColor3f(1.000, 0.980, 0.941);
    drawstring(600.0,560.0,0.0,"PRESS 'C'");
    glColor3f(0.596, 0.984, 0.596);
    drawstring(360.0,200.0,0.0,"NOW PRESS ENTER");
    glFlush();
}

void display()
{
    glPushMatrix();
    glTranslatef(translate_x,translate_y,translate_z);

    if(day==2)
    {
       nightMode();
    }
    else if(day==1)
    {
        dayMode();
    }
    glFlush();
    glutSwapBuffers();
}


//Main Display Function
void myDisplay()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    if(flag==0){

        startscreen();

    }
    if(flag==1)
        controlsScreen();
        //controlsScreen();
    if(flag>1)
        display();

    glFlush();
    glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y)
{
//-------- spin --------
    if(key=='d')
        {
            day=1;
        }
    else if(key=='n')
        {
            day=2;
        }
    else if(key=='c')
        {
            carv=true;
        }

    else if(key==13)
        {
            flag++;
            myDisplay();
        }
    else if(key==27)
        {
            exit(0);
        }
}


void SpecialKeys(int key, int x, int y)
{
    switch (key)
	{
		case GLUT_KEY_LEFT:
            if(translate_x<200)
            {
                translate_x+=5;
                glutPostRedisplay();
            }
			break;

		case GLUT_KEY_RIGHT:
            if(translate_x>-300)
            {
                translate_x-=5;
                glutPostRedisplay();
            }
			break;

	}
}

int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (1024, 768);
glutInitWindowPosition (0, 0);
glutCreateWindow ("AIUB");
myInit();
glutDisplayFunc(myDisplay);
glutKeyboardFunc(keyboard);
glutSpecialFunc(SpecialKeys);
glutMainLoop();
return 0;
}
